- name: Set the Jenkins init settings
  lineinfile:
    dest: "{{ path.jenkins_init }}"
    regexp: '^{{ item.name }}=.*'
    line: '{{ item.name }}={{ item.value }}'
  with_items: "{{ jenkins_init_changes }}"
  register: jenkins_init_config
  notify: restart jenkins

- name: Immediately restart Jenkins on init config changes.
  service: name=jenkins state=restarted
  when: jenkins_init_config is defined and jenkins_init_config.changed

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 10
  delay: 10
  changed_when: false
  check_mode: no

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: no


