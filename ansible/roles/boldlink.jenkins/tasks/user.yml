---
# Create the admin user

- name: Flush any handlers pending
  meta: flush_handlers

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 10
  delay: 10
  changed_when: false
  check_mode: no

- name: Ubuntu = Create custom init scripts directory.
  file:
    path: "{{ jenkins_home }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: 0775

- name: Create Jenkins Admin User script
  template:
    src: initial-security.groovy
    dest: "{{ jenkins_home }}/init.groovy.d/initial-security.groovy"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: 0775
  register: jenkins_admin_config
  when: (cjenkins_install is defined and cjenkins_install.changed) or
        (ujenkins_install is defined and ujenkins_install.changed)

- name: force restart jenkins
  service: name=jenkins state=restarted
  register: jenkins_user_restart
  when: jenkins_admin_config.changed
 
- name: Flush any handlers pending
  meta: flush_handlers

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 10
  delay: 10
  changed_when: false
  check_mode: no

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/initial-security.groovy"
    state: absent
  when: jenkins_user_restart.changed 